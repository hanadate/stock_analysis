"X1" "X2"
"PreD" "2" "3"
"XLK*" "0.21" "0.18"
"XLF*" "0.04" "0.09"
"XLE*" "0.23" "0.31"
"XLB-" "0.04" "0.06"
"XLI-" "0.02" "0.01"
"XLY-" "0.17" "0.18"
"XLV*" "0.05" "0.03"
"XLP-" "0.02" "0.01"
"XLU-" "0.11" "0.05"
"TLT*" "0.07" "0.06"
"zero" "0.04" "0.03"

Tech XLK x3= TECL
Fin  XLF x3= FAS
Ind  XLI
Bas  XLB
Cons XLY
Ene  XLE x2= ERX
Heal XLV x3= CURE
Util XLU
Stap XLP
Trea TLT x3= TMF
SPSh SH x3=SPXS
Zero zero
# Note: Sell fast Leveraged ETFs. It must decay in a long term.
# Pre: 19:00-22:30/20:00-23:30, EST 06:00-09:30.
# Market: 22:30-05:00/23:30-06:00, EST 09:30-16:00.
# After: 05:00-09:00/06:00-10:00, EST 16:00-20:00.

START: 2025-03-25 06:05:07
END: 2025-03-25 17:36:24
MIN DATE: 2006-12-01
MAX DATE: 2025-03-24
DIM: 4605x4579
===2 days===
AUC: 0.994428528526599
Accuracy: 0.856615250923311
eta : c(0.1, 0.1, 0.1, 0.1)
max_depth : c(3, 3, 5, 5)
gamma : c(0.1, 0.1, 0.1, 0.1)
colsample_bytree : c(0.7, 0.7, 0.7, 0.7)
min_child_weight : c(2, 4, 2, 4)
subsample : c(1, 1, 1, 1)
nrounds : c(200, 200, 200, 200)
logLoss : c(2.16, 2.17, 2.19, 2.17)
logLossSD : c(0.03, 0.03, 0.04, 0.03)
nrounds : 200
max_depth : 3
eta : 0.1
gamma : 0.1
colsample_bytree : 0.7
min_child_weight : 2
subsample : 1
===3 days===
AUC: 0.999999883884572
Accuracy: 0.999565406345067
eta : c(0.1, 0.1, 0.1, 0.1)
max_depth : c(3, 3, 5, 5)
gamma : c(0.1, 0.1, 0.1, 0.1)
colsample_bytree : c(0.7, 0.7, 0.7, 0.7)
min_child_weight : c(2, 4, 2, 4)
subsample : c(1, 1, 1, 1)
nrounds : c(200, 200, 200, 200)
logLoss : c(1.97, 1.99, 1.91, 1.9)
logLossSD : c(0.02, 0.02, 0.03, 0.03)
nrounds : 200
max_depth : 5
eta : 0.1
gamma : 0.1
colsample_bytree : 0.7
min_child_weight : 2
subsample : 1
===trainControl===
method : repeatedcv
number : 5
repeats : 5
search : random
p : 0.75
initialWindow : NULL
horizon : 1
fixedWindow : TRUE
skip : 0
verboseIter : TRUE
returnData : TRUE
returnResamp : final
savePredictions : FALSE
classProbs : TRUE
summaryFunction : function (data, lev = NULL, model = NULL) 
{
    if (is.null(lev)) 
        stop("'lev' cannot be NULL")
    if (!all(lev %in% colnames(data))) 
        stop("'data' should have columns consistent with 'lev'")
    if (!all(sort(lev) %in% sort(levels(data$obs)))) 
        stop("'data$obs' should have levels consistent with 'lev'")
    dataComplete <- data[complete.cases(data), ]
    probs <- as.matrix(dataComplete[, lev, drop = FALSE])
    logLoss <- ModelMetrics::mlogLoss(dataComplete$obs, probs)
    c(logLoss = logLoss)
}
selectionFunction : tolerance
preProcOptions : list(thresh = 0.95, ICAcomp = 3, k = 5, freqCut = 19, uniqueCut = 10, cutoff = 0.9)
sampling : NULL
index : NULL
indexOut : NULL
indexFinal : NULL
timingSamps : 0
predictionBounds : c(FALSE, FALSE)
seeds : NA
adaptive : list(min = 5, alpha = 0.05, method = "gls", complete = TRUE)
trim : FALSE
allowParallel : TRUE
===tuneGrid===
nrounds : c(200, 200, 200, 200)
max_depth : c(3, 5, 3, 5)
eta : c(0.1, 0.1, 0.1, 0.1)
gamma : c(0.1, 0.1, 0.1, 0.1)
colsample_bytree : c(0.7, 0.7, 0.7, 0.7)
min_child_weight : c(2, 2, 4, 4)
subsample : c(1, 1, 1, 1)
===Quantile of winner's return===
"sector" "Q1" "Q2" "Q3"
"TLT" "1.008" "1.013" "1.018"
"XLB" "1.013" "1.019" "1.027"
"XLE" "1.014" "1.023" "1.034"
"XLF" "1.013" "1.021" "1.036"
"XLI" "1.011" "1.017" "1.027"
"XLK" "1.011" "1.018" "1.026"
"XLP" "1.007" "1.01" "1.015"
"XLU" "1.01" "1.015" "1.021"
"XLV" "1.009" "1.014" "1.019"
"XLY" "1.011" "1.017" "1.027"
"zero" "1" "1" "1"
