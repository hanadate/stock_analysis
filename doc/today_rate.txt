"4515" "45151"
"predict_date" "10" "20"
"XLK" "0.08" "0.11"
"XLF" "0.06" "0.13"
"XLI" "0.02" "0.06"
"XLB" "0.08" "0.07"
"XLY" "0.39" "0.19"
"XLE" "0.15" "0.09"
"XLV" "0.06" "0.03"
"XLU" "0.12" "0.28"
"XLP" "0.04" "0.04"
"pdt" "10" "20"

Tech XLK x3= TECL
Fin  XLF x3= FAS
Ind  XLI
Bas  XLB
Cons XLY
Ene  XLE x2= ERX
Heal XLV x3= CURE
Util XLU
Stap XLP
# Note: Sell fast Leveraged ETFs. It must decay in a long term.

START: 2024-11-09 06:05:08
END: 2024-11-09 15:33:18
MIN DATE: 2006-12-01
MAX DATE: 2024-11-08
DIM: 4515x4579
===10 days===
AUC: 1
eta : c(0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05)
max_depth : c(2, 2, 2, 4, 4, 4, 6, 6, 6)
gamma : c(0, 0, 0, 0, 0, 0, 0, 0, 0)
colsample_bytree : c(0.1, 0.4, 0.7, 0.1, 0.4, 0.7, 0.1, 0.4, 0.7)
min_child_weight : c(1, 1, 1, 1, 1, 1, 1, 1, 1)
subsample : c(1, 1, 1, 1, 1, 1, 1, 1, 1)
nrounds : c(100, 100, 100, 100, 100, 100, 100, 100, 100)
logLoss : c(1.8, 1.79, 1.78, 1.4, 1.38, 1.37, 1.16, 1.14, 1.15)
logLossSD : c(0.01, 0.01, 0.01, 0.01, 0.02, 0.02, 0.02, 0.03, 0.03)
===20 days===
AUC: 1
eta : c(0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05)
max_depth : c(2, 2, 2, 4, 4, 4, 6, 6, 6)
gamma : c(0, 0, 0, 0, 0, 0, 0, 0, 0)
colsample_bytree : c(0.1, 0.4, 0.7, 0.1, 0.4, 0.7, 0.1, 0.4, 0.7)
min_child_weight : c(1, 1, 1, 1, 1, 1, 1, 1, 1)
subsample : c(1, 1, 1, 1, 1, 1, 1, 1, 1)
nrounds : c(100, 100, 100, 100, 100, 100, 100, 100, 100)
logLoss : c(1.58, 1.55, 1.54, 1.09, 1.05, 1.05, 0.85, 0.83, 0.83)
logLossSD : c(0.01, 0.01, 0.01, 0.02, 0.02, 0.02, 0.03, 0.03, 0.03)
===trainControl===
method : repeatedcv
number : 5
repeats : 2
search : random
p : 0.75
initialWindow : NULL
horizon : 1
fixedWindow : TRUE
skip : 0
verboseIter : TRUE
returnData : TRUE
returnResamp : final
savePredictions : FALSE
classProbs : TRUE
summaryFunction : function (data, lev = NULL, model = NULL) 
{
    if (is.null(lev)) 
        stop("'lev' cannot be NULL")
    if (!all(lev %in% colnames(data))) 
        stop("'data' should have columns consistent with 'lev'")
    if (!all(sort(lev) %in% sort(levels(data$obs)))) 
        stop("'data$obs' should have levels consistent with 'lev'")
    dataComplete <- data[complete.cases(data), ]
    probs <- as.matrix(dataComplete[, lev, drop = FALSE])
    logLoss <- ModelMetrics::mlogLoss(dataComplete$obs, probs)
    c(logLoss = logLoss)
}
selectionFunction : tolerance
preProcOptions : list(thresh = 0.95, ICAcomp = 3, k = 5, freqCut = 19, uniqueCut = 10, cutoff = 0.9)
sampling : NULL
index : NULL
indexOut : NULL
indexFinal : NULL
timingSamps : 0
predictionBounds : c(FALSE, FALSE)
seeds : NA
adaptive : list(min = 5, alpha = 0.05, method = "gls", complete = TRUE)
trim : FALSE
allowParallel : TRUE
===tuneGrid===
nrounds : c(100, 100, 100, 100, 100, 100, 100, 100, 100)
max_depth : c(2, 4, 6, 2, 4, 6, 2, 4, 6)
eta : c(0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05, 0.05)
gamma : c(0, 0, 0, 0, 0, 0, 0, 0, 0)
colsample_bytree : c(0.1, 0.1, 0.1, 0.4, 0.4, 0.4, 0.7, 0.7, 0.7)
min_child_weight : c(1, 1, 1, 1, 1, 1, 1, 1, 1)
subsample : c(1, 1, 1, 1, 1, 1, 1, 1, 1)
